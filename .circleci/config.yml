version: 2.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name Udapeople-backend-<< parameters.id >>
            aws cloudformation delete-stack --stack-name Udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.id >>)
            if(( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              # npm run build
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Run frontend test 
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Run backend test 
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Check for security vulnerabilities frontend
          
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install yum and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  \
            --tags ThisInstance=UdaBackEnd
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name Udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag-value, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt 
            cat .circleci/ansible/inventory.txt
            
    
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}     

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "0e:42:5c:1a:d1:f6:a5:48:cc:8d:76:24:cf:dd:9d:7c"

      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli

      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # cd .circleci/ansible
            # ansible-playbook -i inventory.txt configure-server.yml
            # add environment variables to server
            echo NODE_ENV=production > ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            cat ~/project/backend/.env
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml \
          no_output_timeout: 30m
      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # npm audit fix --force
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has become successfully executed" ~/project/backend/migrations.txt
            then
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
     
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag-value, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "0e:42:5c:1a:d1:f6:a5:48:cc:8d:76:24:cf:dd:9d:7c"

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd .. 
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache curl aws-cli npm nodejs
            # sudo apt update
            # sudo apt install -y tar gzip curl
            # sudo apt install -y awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(tail -n 1 ~/project/.circleci/ansible/inventory.txt)
            # export BACKEND_IP=$(aws ec2 describe-instances \
            # --filters "Name=tag:ThisInstance, Values=UdaBackEnd" \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                
              return 0
            else
              return 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
     
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip npm nodejs -y
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text) 
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt


      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip npm nodejs -y
      - attach_workspace:
          at: ~/
      - run:
          name: Fetch the Old Workflow ID
          command: |
  
            cat ~/OldWorkflowID.txt
            
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            

            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)

            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo Number of Stacks: "${#STACKS[@]}"
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "------Cleaning up redundant resources-------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive 
              aws cloudformation delete-stack --stack-name "Udapeople-frontend-${OldWorkflowID}"  
              aws cloudformation delete-stack --stack-name "Udapeople-backend-${OldWorkflowID}"
              
            else
              echo  -------- Cannot Cleanup --------
            fi



workflows:
  default:
    jobs:
      - build-frontend
          filters:
           
      - build-backend
          filters:
           
      - test-frontend:
          requires: [build-frontend]
          
      - test-backend:
          requires: [build-backend]
         
      - scan-backend:
          requires: [build-backend]
        
      - scan-frontend:
          requires: [build-frontend]
     
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           filters:
            branches:
              only: [dev-branch]
              
      -  configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      